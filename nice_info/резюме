В небольшой команде разработчиков разработали следующие програмные продукты

1. сайт интернет-магазина
    Заказ сайта под ключ
    Стек:
    Django, graphQL, graphene, postgreSQL, Redis, celery, Docker, docker-compose, nginx, elasticsearch, github, centOS

    С моей стороны были сделаны:

    В рамках данного проекта было разработано API (использовался принцип GraphQL)
    Использовался фреймровк Django, библиотекой для graphQL использовался graphene
    Разработал архитектуру базы данных на PostgreSQL
    Для взаимодействия с БД применял Django ORM
    Часть данных хранится в Redis для кэширования
    Разработана аутентификация, авторизация, личный кабинет.
    Для исполнения фоновых задач таких, как отправка письма пользователю, а также для scheduled задач применялся celery
    В качестве реверс проксирования использовался nginx
    Был разработан модуль для оплаты и взаимодействия с внешним API Т-банка
    Слой бизнес логики был разделен от слоя Django и слоя работы с базой данных
    Функционал API был покрыт интеграционными тестами (тестирование GraphQL-эндпоинтов)
    Настроена и адаптирована админ-панель Django для удобной работы заказчика с базой данных
    Все компоненты программы были в различных контейнерах Docker для их оркестрации применялся docker-compose



2. B2B телеграм-бот для связи между сотрудниками компании и CRM
    
    Стек:
    aiogram, aiohttp, postgreSQL, Redis, celery, Docker, docker-compose, pandas, github, Debian
    
    С моей стороны были сделаны:

    Была спроектирована база данных для хранения информации и прав пользователей(связь telegram и роли в CRM)
    Использовался postgreSQL, для взаимодействия с ним применялся Django ORM
    Было выделено три сущности ролей:
        -Метрологи 
        -Мендежеры
        -Админ
    Для всех них было различное поведение
    Метрологи заполняли различные виды отчетов по различным заказам, с особенной бизнес логикой и поведением.
    Менеджеры взаимодействовали со складом и его товарами
    Админ мог смотреть аггрегацию по данным из CRM
    Аггрегировались метрики эффективности сотрудников за различные периоды по различным сотрудникам или всем сотрудникам
    Также была аггрегация данных товаров склада
    Логика модуля отчётов реализована таким образом, что повторяющиеся вопросы оформлены как отдельные интерфейсы,
    а затем комбинируются в разные последовательности (scene)
    В качестве взаимодействия с CRM использовалась их API, с которым взаимодействовал через aiohttp
    Для аггрегации использовался pandas
    Все компоненты программы были в различных контейнеров Docker для их оркестрации применялся docker-compose
    Информация за прошедшие длительные периоды сохранялась в кэше (redis) для улучшения пользовательского experience, 
    а для поддержания корректной синхронизации той редко изменяемой информации использовались celery scheduled tasks
    Длительные задачи, такие как отправка форм и отчетов метрологов в CRM обарабатывалсь в фоновых задачах
    Модули aiogram, бизнес-логики и взаимодействия с API CRM был разделен на слои.

    Продукт был разработан для 2 разных компаний с небольшими различиями в технической заданиях и бизнес логике, 
    удачно адаптирован для разных решений

Были и другие проекты, но эти два самые крупные, готов рассказать о тонкостях проектов и принятых технических решениях
на собеседованиях.


Я трудолюбив, способен быстро обучаться, готов брать на себя ответственность.
Обладаю хорошими коммуникативными навыками, эффективно взаимодействовал в команде
Уровень знания английского языка B1-B2 позволяет читать англоязычную документацию

Хорошо знаю алгоритмы и структуры данных, особенности их работы и реализации. 
Обладаю хорошим аппаратом высшей математики и ее приложений. 
Люблю погружаться в детали работы бэкенд приложений, баз данных, самого python, архитектур.
В свободное время люблю изучать новое и писать pet-проекты, о которых подробно готов рассказать при общении.

Нахожусь в Москве. Готов работать удаленно или гибридный вариант.
